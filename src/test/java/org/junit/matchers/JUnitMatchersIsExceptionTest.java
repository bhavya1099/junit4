// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=isException_3457bbd783
ROOST_METHOD_SIG_HASH=isException_5f9f1bf097
"""
Scenario 1: Test the isException method when providing a valid exception matcher
Details:
    TestName: testIsExceptionWithValidMatcher.
    Description: This test is aimed to verify that the isException method successfully creates a StacktracePrintingMatcher when provided with a valid exception matcher.
  Execution:
    Arrange: Create a valid Exception matcher using CoreMatchers.notNullValue().
    Act: Invoke the isException method with the created matcher as the parameter.
    Assert: Assert that the returned value is an instance of StacktracePrintingMatcher.
  Validation:
    The assertion aims to test that the isException method correctly creates a StacktracePrintingMatcher with the provided exception matcher. Passing this test would signify that the method functions properly for a nominal use case.
Scenario 2: Test the isException method when passed a null matcher
Details:
    TestName: testIsExceptionWithNullMatcher.
    Description: This test aims to check that the isException method properly handles null input and does not throw any exceptions.
  Execution:
    Arrange: Set the matcher as null.
    Act: Invoke the isException method with the null matcher.
    Assert: Assert that a NullPointerException is thrown.
  Validation:
    The goal of this test is to confirm that the method appropriately handles null input by throwing a NullPointerException. This helps ensure that the method stays robust under erroneous conditions.
Scenario 3: Test the isException method when passed a CombiningMatcher
Details:
    TestName: testIsExceptionWithCombiningMatcher.
    Description: This test verifies that the isException method can handle complex matchers such as a CombiningMatcher without any issues.
  Execution:
    Arrange: Create a CombiningMatcher with two valid exception matchers.
    Act: Invoke the isException method with the CombiningMatcher object as the parameter.
    Assert: Assert that the returned value is an instance of StacktracePrintingMatcher.
  Validation:
    This test is meant to verify that a more complex exception matcher, a CombiningMatcher in this case, can be passed to the method without causing any issues. It helps ensure that the method stays versatile and adaptive to different kinds of matchers.
"""
*/
// ********RoostGPT********
package org.junit.matchers;

import org.hamcrest.*;
import org.junit.internal.matchers.StacktracePrintingMatcher;
import org.junit.Test;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.junit.Assert.assertThat;
import org.junit.experimental.categories.Category;

@Category({ Categories.isException.class, Categories.tag2.class, Categories.tag3.class })
public class JUnitMatchersIsExceptionTest {

	@Test
	public void testIsException() {
		Matcher<Exception> mmc = CoreMatchers.is(Exception.class); // Creates a matcher
																	// for Exception Class
																	// Objects
		try {
			throw new Exception("test exception");
		}
		catch (Exception ex) {
			assertThat("test exception", StacktracePrintingMatcher.isException(mmc).toString(),
					equalTo(ex.getMessage())); // matchers are compared here
		}
	}

}