// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=containsString_cbff1f8a1b
ROOST_METHOD_SIG_HASH=containsString_4f3a6fb431
Scenario 1: Valid String Containing Substring
Details:
TestName: containsValidSubstring
Description: This test verifies the functionality of the containsString method when handling valid strings that contain the provided substring.
Execution:
Arrange: Assign a valid string variable that contains a given substring.
Act: Call the containsString method with the predefined substring.
Assert: Confirm that the returned Matcher correctly identifies the substring within the original string.
Validation:
We would expect the Matcher to successfully match the substring in the test string. This test is significant as it demonstrates the correct behavior of containsString method with valid input.
Scenario 2: Valid String Not Containing Substring
Details:
TestName: doesNotContainSubstring
Description: This test case aims to check the containsString method's functionality when the provided string does not contain the specified substring.
Execution:
Arrange: Assign a valid string variable not containing the given substring.
Act: Call the containsString method with the predefined substring.
Assert: Confirm that the returned Matcher correctly identifies the substring is not within the original string.
Validation:
The Matcher is expected to return false as the test string does not contain the given substring. The significance of this test lies in making sure the containsString method correctly identifies when a substring isn't present.
Scenario 3: Empty String Test
Details:
TestName: emptySubstringInString
Description: Test to check the functionality of containsString when an empty string is provided as a parameter.
Execution:
Arrange: Declare a non-empty string and an empty string for the substring.
Act: Call the containsString method using the empty substring.
Assert: Assert that the returned Matcher confirms that an empty substring is in the original string.
Validation:
The Matcher should return true as an empty string is technically a subset of every string. This scenario validates that our function can handle and return correct results for edge cases.
Scenario 4: Null String Test
Details:
TestName: nullSubstring
Description: Test case to check the behavior of containsString method when a null string is passed as the substring.
Execution:
Arrange: Declare a valid string and a null for the substring.
Act: Call the containsString method with the null substring.
Assert: We expect the method to throw a NullPointerException.
Validation:
The assertion helps us ensure the correct exception is thrown. This scenario tests the method's behavior when encountering null values, ensuring the program can handle unexpected inputs and errors gracefully.
*/
// ********RoostGPT********
package org.junit.matchers;

import org.junit.Test;
import static org.junit.Assert.assertThat;
import static org.hamcrest.CoreMatchers.containsString;
import org.hamcrest.CoreMatchers;
import org.hamcrest.Matcher;
import org.hamcrest.core.CombinableMatcher.CombinableBothMatcher;
import org.hamcrest.core.CombinableMatcher.CombinableEitherMatcher;
import org.junit.internal.matchers.StacktracePrintingMatcher;
import org.junit.experimental.categories.Category;

@Category(Categories.containsString.class)
public class JUnitMatchersContainsStringTest {

	@Test
	public void containsValidSubstring() {
		String testString = "Hello World!";
		String substring = "World";
		assertThat(testString, containsString(substring));
	}

	@Test
	public void doesNotContainSubstring() {
		String testString = "Hello World!";
		String substring = "Goodbye";
		assertThat(testString, CoreMatchers.not(containsString(substring)));
	}

	@Test
	public void emptySubstringInString() {
		String testString = "Hello World!";
		String substring = "";
		assertThat(testString, containsString(substring));
	}

	@Test(expected = NullPointerException.class)
	public void nullSubstring() {
		String testString = "Hello World!";
		String substring = null;
		containsString(substring);
	}

}